{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZeYo57J_lC4O"
      },
      "outputs": [],
      "source": [
        "!pip install thetadata"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import sys\n",
        "import pickle\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "from datetime import timedelta, datetime, date\n",
        "from thetadata import ThetaClient, OptionReqType, OptionRight, DateRange, DataType, StockReqType\n",
        "from thetadata import MessageType, TradeCondition\n",
        "from thetadata import StreamMsg, StreamMsgType"
      ],
      "metadata": {
        "id": "RxpggUvPl42L"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Set your API username for authentication
api_username = ''\n",
        "# Set your API password for authentication
api_password = ''"
      ],
      "metadata": {
        "id": "QVHgSdVWxKfA"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# User generated method that gets called each time a message from the stream arrives.\n",
        "def # Stream event handler: function to process incoming streaming data
stream_event_handler(# Process each stream message that arrives in real-time
stream_message: StreamMsg):\n",
        "    # Process each stream message that arrives in real-time
stream_message.type = # Process each stream message that arrives in real-time
stream_message.type\n",
        "\n",
        "    if # Process each stream message that arrives in real-time
stream_message.type == StreamMsgType.TRADE:\n",
        "        print('---------------------------------------------------------------------------')\n",
        "        print('con:                         ' + # Process each stream message that arrives in real-time
stream_message.contract.to_string())\n",
        "        print('trade:                       ' + # Process each stream message that arrives in real-time
stream_message.trade.to_string())\n",
        "        print('last quote at time of trade: ' + # Process each stream message that arrives in real-time
stream_message.quote.to_string())"
      ],
      "metadata": {
        "id": "_0xlKIv7xL46"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a data client to interact with API and retrieve real-time data
data_client = ThetaClient(username=api_username, passwd=api_password)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RFOVNCEBxOPj",
        "outputId": "ede55d99-fb66-4c85-b1c1-a316f5e7d783"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "If you require API support, feel free to join our discord server! http://discord.thetadata.us\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_client.connect_stream(stream_event_handler)"
      ],
      "metadata": {
        "id": "PLLgAcy0xSYA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_client.req_full_trade_stream_opt()  # Subscribes to every option trade.\n"
      ],
      "metadata": {
        "id": "35msVKGRxa5L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_client.remove_full_trade_stream_opt()  # Unsubscribes from the full option trade stream.\n"
      ],
      "metadata": {
        "id": "YMzXWoQoxbql"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_client.close_stream()\n"
      ],
      "metadata": {
        "id": "CN_YPCg8xdYk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_expirations(primary_ticker) -> pd.DataFrame:\n",
        "    \"\"\"Request expirations from a particular options root\"\"\"\n",
        "    # Create a ThetaClient\n",
        "    # Create a data client to interact with API and retrieve real-time data
data_client = ThetaClient(username=api_username, passwd=api_password, jvm_mem=4, timeout=15)\n",
        "\n",
        "    # Connect to the Terminal\n",
        "    with data_client.connect():\n",
        "\n",
        "        # Make the request\n",
        "        data = data_client.get_expirations(\n",
        "            root=primary_ticker,\n",
        "        )\n",
        "\n",
        "    return data"
      ],
      "metadata": {
        "id": "12nnKoT7xeyV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the primary ticker symbol for options data
primary_ticker = 'META'\n",
        "expirations = get_expirations(primary_ticker)\n",
        "expirations"
      ],
      "metadata": {
        "id": "R380jmyQxghN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "trading_days = pd.date_range(start=datetime(2023,1,24),end=datetime(2024,12,31),freq='B')\n",
        "# The third friday in every month\n",
        "contracts = pd.date_range(start=datetime(2023,1,24),end=datetime(2024,12,31),freq='WOM-3FRI')\n",
        "# Find contract expiries that match with ThetaData expiries\n",
        "mth_expirations = [exp for exp in expirations if exp in contracts]\n",
        "# Convert from python list to pandas datetime\n",
        "mth_expirations = pd.to_datetime(pd.Series(mth_expirations))\n",
        "\n",
        "mth_expirations"
      ],
      "metadata": {
        "id": "9IMrvyqUxh1i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_strikes(primary_ticker, expiration_dates) -> pd.DataFrame:\n",
        "    \"\"\"Request strike_prices from a particular option contract\"\"\"\n",
        "    # Create a ThetaClient\n",
        "    # Create a data client to interact with API and retrieve real-time data
data_client = ThetaClient(username=api_username, passwd=api_password, jvm_mem=4, timeout=15)\n",
        "\n",
        "    all_strikes = {}\n",
        "\n",
        "    # Connect to the Terminal\n",
        "    with data_client.connect():\n",
        "\n",
        "        for exp_date in expiration_dates:\n",
        "\n",
        "            # Make the request\n",
        "            data = data_client.get_strikes(\n",
        "                root=primary_ticker,\n",
        "                exp=exp_date\n",
        "            )\n",
        "\n",
        "            all_strikes[exp_date] = pd.to_numeric(data)\n",
        "\n",
        "\n",
        "    return all_strikes"
      ],
      "metadata": {
        "id": "4f9jIkMQxmm9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the primary ticker symbol for options data
primary_ticker = 'META'\n",
        "\n",
        "all_strikes = get_strikes(primary_ticker, mth_expirations)\n",
        "\n",
        "with open('strike_prices.pkl', 'wb') as f:\n",
        "    pickle.dump(all_strikes, f)"
      ],
      "metadata": {
        "id": "11t2_CCTxmrX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "with open('strike_prices.pkl', 'rb') as f:\n",
        "    all_strikes = pickle.load(f)\n",
        "\n",
        "print(\"Option Contract: \", mth_expirations[0])\n",
        "print(\"META Strike \", all_strikes[mth_expirations[0]][13])"
      ],
      "metadata": {
        "id": "cvyS468nxmtd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a data client to interact with API and retrieve real-time data
data_client = ThetaClient(username=api_username, passwd=api_password)"
      ],
      "metadata": {
        "id": "orznDt1Xxm21"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_client.connect_stream(stream_event_handler)"
      ],
      "metadata": {
        "id": "zTnx3hhIxm48"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the primary ticker symbol for options data
primary_ticker = 'GOOGL'\n",
        "option_rights=[\"P\", \"C\"]\n",
        "for opt_type in option_rights:\n",
        "    for expiration_date in mth_expirations:\n",
        "        # Set the strike prices of the options
strike_prices = all_strikes[expiration_date]\n",
        "        for strike in strike_prices:\n",
        "            # add specific contract to required trade stream using req_trade_stream_opt()\n",
        "            data_client.req_trade_stream_opt(primary_ticker, expiration_date.date(), strike, OptionRight.CALL if opt_type==\"C\" else OptionRight.PUT)"
      ],
      "metadata": {
        "id": "C8WmL4Fsxm72"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_client.close_stream()"
      ],
      "metadata": {
        "id": "K3iy1JbqzLDk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "global trade_log\n",
        "# Container to store all the trade data received from the stream
trade_log = {}\n",
        "\n",
        "# Specify the option types or rights (e.g., call or put)
option_rights = [\"P\", \"C\"]\n",
        "for expiration_date in mth_expirations:\n",
        "    trade_log[expiration_date] = {}\n",
        "    # Set the strike prices of the options
strike_prices = all_strikes[expiration_date]\n",
        "    for strike in strike_prices:\n",
        "        trade_log[expiration_date][strike] = {}\n",
        "        for opt_type in option_rights:\n",
        "            trade_log[expiration_date][strike][opt_type] = pd.DataFrame(\n",
        "                columns = ['ms_of_day','sequence','size','condition','price','date']\n",
        "            )"
      ],
      "metadata": {
        "id": "k3gXHxxbzMzZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def build_trades_data(# Process each stream message that arrives in real-time
stream_message: StreamMsg):\n",
        "    # Process each stream message that arrives in real-time
stream_message.type = # Process each stream message that arrives in real-time
stream_message.type\n",
        "\n",
        "    if # Process each stream message that arrives in real-time
stream_message.type == StreamMsgType.TRADE:\n",
        "        print('---------------------------------------------------------------------------')\n",
        "        print('trade:                       ' + # Process each stream message that arrives in real-time
stream_message.trade.to_string())\n",
        "        # Set up expiration_date, strike and opt_type for easy reference in dataframe\n",
        "        # Define the expiration date of the options
expiration_date = datetime(# Process each stream message that arrives in real-time
stream_message.contract.exp.year, # Process each stream message that arrives in real-time
stream_message.contract.exp.month, # Process each stream message that arrives in real-time
stream_message.contract.exp.day)\n",
        "        strike = # Process each stream message that arrives in real-time
stream_message.contract.strike\n",
        "        opt_type = \"C\" if # Process each stream message that arrives in real-time
stream_message.contract.isCall else \"P\"\n",
        "\n",
        "        trade_log[expiration_date][strike][opt_type] = pd.concat([\n",
        "            trade_log[expiration_date][strike][opt_type],\n",
        "                    pd.DataFrame({'ms_of_day': # Process each stream message that arrives in real-time
stream_message.trade.ms_of_day,\n",
        "                     'sequence': # Process each stream message that arrives in real-time
stream_message.trade.sequence,\n",
        "                     'size': # Process each stream message that arrives in real-time
stream_message.trade.size,\n",
        "                     'condition': str(# Process each stream message that arrives in real-time
stream_message.trade.condition).replace('TradeCondition.', ''),\n",
        "                     'price': # Process each stream message that arrives in real-time
stream_message.trade.price,\n",
        "                     'date': # Process each stream message that arrives in real-time
stream_message.trade.date}, index=[# Process each stream message that arrives in real-time
stream_message.trade.sequence])\n",
        "            ], ignore_index = False)"
      ],
      "metadata": {
        "id": "41-_5nEJzPEt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a data client to interact with API and retrieve real-time data
data_client = ThetaClient(username=api_username, passwd=api_password)"
      ],
      "metadata": {
        "id": "6Oj_SyGwzQ03"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_client.connect_stream(build_trades_data)"
      ],
      "metadata": {
        "id": "09dap7OMzSWM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# add specific contract to required trade stream using req_trade_stream_opt()\n",
        "# Define the primary ticker symbol for options data
primary_ticker = 'GOOGL'\n",
        "option_rights=[\"P\", \"C\"]\n",
        "for opt_type in option_rights:\n",
        "    for expiration_date in mth_expirations:\n",
        "        # Set the strike prices of the options
strike_prices = all_strikes[expiration_date]\n",
        "        for strike in strike_prices:\n",
        "            data_client.req_trade_stream_opt(primary_ticker, expiration_date.date(), strike, OptionRight.CALL if opt_type==\"C\" else OptionRight.PUT)"
      ],
      "metadata": {
        "id": "TefFlZ6xzV-A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data_client.close_stream()"
      ],
      "metadata": {
        "id": "o0-wyJ2B0AW5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Specify the option types or rights (e.g., call or put)
option_rights = [\"P\", \"C\"]\n",
        "for expiration_date in mth_expirations:\n",
        "    # Set the strike prices of the options
strike_prices = all_strikes[expiration_date]\n",
        "    for strike in strike_prices:\n",
        "        for opt_type in option_rights:\n",
        "            if not trade_log[expiration_date][strike][opt_type].empty:\n",
        "                print(\"Expiry: \", expiration_date, \" Strike: \", strike, \" Opt Type: \", opt_type, \"\\n\")\n",
        "                print(trade_log[expiration_date][strike][opt_type])"
      ],
      "metadata": {
        "id": "mGhb0ujh0Dl3"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
